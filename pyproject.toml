
[project]
name = "fastapi-zero"
version = "0.1.0"
description = "FastAPI Zero - Curso FastAPI"
authors = [
    {name = "ester-17",email = "139085601+ester-17@users.noreply.github.com"}
]
readme = "README.md"
requires-python = ">=3.11,<4.0"
dependencies = [
    "fastapi[standard] (>=0.118.0,<0.119.0)"
]

[tool.pytest.ini_options]
pythonpath = "."
addopts = '-p no:warnings'

[tool.taskipy.tasks]
run = 'fastapi dev fastapi_zero/app.py'

pre_test = 'task lint'
test = 'pytest -s -x --cov=fastapi_zero -vv'    # executes in a verbose way
post_test = 'coverage html'

lint = 'ruff check . && ruff check . --diff'    # mostra onde precisa corrigir o código
format = 'ruff check . --fix && ruff format .'  # corrige o código

[tool.poetry]
packages = [{include = "fastapi_zero"}]

[tool.poetry.dependencies]
fastapi = { version = ">=0.118.0,<0.119.0", extras = ["standard"] }

[tool.poetry.group.dev.dependencies]
ruff = ">=0.14.0,<0.15.0"
pytest = "^8.0"
pytest-cov = ">=7.0.0,<8.0.0"



[tool.ruff]
line-length = 79
extend-exclude = ['migrations']

[tool.ruff.lint]
preview = true  # Para mostrar o que está "lintando"
# Seleciona as ferramentas desejadas:
select = ['I', 'F', 'E', 'W', 'PL', 'PT']
# I = Isort -> ordenação de imports em ordem alfabética
# F = Pyflakes -> procura por alguns erros em relação a boas práticas de código
# E = pycodestyle -> erros de estilo de código
# W = pucodestyle -> avisos sobre estilo de código
# PL = Pylint -> "erros" em relação a boas práticas de código
# PT = flake8-pytest -> boas práticas do Pytest

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[dependency-groups]
dev = [
    "ruff (>=0.14.0,<0.15.0)",
    "pytest (>=8.4.2,<9.0.0)",
    "pytest-cov (>=7.0.0,<8.0.0)",
    "taskipy (>=1.14.1,<2.0.0)"
]
